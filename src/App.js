import { HashRouter, Routes, Route, NavLink } from "react-router-dom";
import {Component} from 'react';
import TodoList from './TodoList'; //импортируем компонент из модуля src\TodoList.js
import TodoAdd from './TodoAdd'; //импортируем компонент из модуля src\TodoAdd.js


const date1 = new Date(2021, 7, 19, 14, 5);
const date2 = new Date(2021, 7, 19, 15, 23);

const initialData = [ // ..............Обьявили массив с двумя заплан делами... 1
    {
        title: 'Изучить React',
        desc: 'Да поскорее!',
        image: '',
        done: true, // ..................пометили как выполненное.............................. 2
        createdAt: date1.toLocaleString(),
        key: date1.getTime()
    },
    {
        title: 'Написать первое React-приложение',
        desc: 'Список запланированных дел',
        image: '',
        done: false,
        createdAt: date2.toLocaleString(),
        key: date2.getTime()
    }
];

export default class App extends Component { // ...класс компонента react должен быть производным от класса Component. 3
    constructor(props) { // ......................................... 4
        /*В конструкторе обязательно следует вызвать конструктор базового
        класса, передав ему полученный через параметр объект с пропами (поз. 5), иначе
        компонент не заработает.*/
        super(props); // .............................................. 5
        /*массив с делами, хранящийся в константе initialData, присваивается свойству data (поз. 6).*/
        this.state = {data: initialData};
        //в нашем обьекте состояния будет находится свойство data, хранящее ссылку на массив дел
        this.setDone = this.setDone.bind(this); //Метод bind создает на основе переданной фнкции новую функцию ,
    //    в которой переменная this ссылается на обьект , указанный в первом параметре метода bind
        this.delete = this.delete.bind(this);
        this.add = this.add.bind(this);
    }

    setDone(key) {
        //Этот метод помечает дело как выполненное
        const deed = this.state.data.find((current) => current.key === key);
        //Используем метод find() класса Array для поиска в массиве дела, у которого идент совпадает с полученным в качестве параметра
        //Если дело найдено, заносим в его свойство done значение true
        if (deed)
            deed.done = true;
        this.setState((state) =>({}));
    //    Меняем состояние, не меняя значений свойств, для чего вернем из функции переданной методу setState() пустой объект
    }
    delete(key) {
    //    Этот метод удалит дело с заданным идентификатором
        const newData = this.state.data.filter(
            (current) => current.key !==key
            //получаем новый массив дел, не содержащий дела с указанным идентификатором
        );
        this.setState((state) => ({data: newData}));
    //    после чего меняем состояние, занеся в свойство data обновленного обьекта состояния ссылку на новый массив
    }
    //Этот метод добавит в массив новое дело, представленное простоым обьектом
    add(deed) {
        //Мы добавляем новое дело в массив из свойства data объекта состояния и изменяем состояние, не меняя значений его свойств
        this.state.data.push(deed);
        this.setState((state) => ({}));
    }

    /*метод render() (поз. 7), который выводит компонент на страницу. Он должен возвращать особый объект,
    представляющий содержимое компонента: все имеющиеся в нем абзацы, заголовки, списки, таблицы, элементы управления и пр. (поз. 8).*/
    render() { // ................................................... 7
        return ( // ..........Далее идет JSX код......................................... 8

            <HashRouter> {/* ....это маршрутизатор............... 14*/}

                <nav className="navbar is-light"> {/* ......................
                    со стилевым классом navbar-brand — обозначение бренда, выводящееся в левой части полосы навигации и обычно представляю-
                    щее собой название приложения.*/}
                    <div className="navbar-brand"> {/* ....................... 12
                        со стилевыми классами navbar-item (собственно обозначение бренда) и is-uppercase (приведение
                        текста к верхнему регистру), в котором и выводится наш бренд — слово «Todos». */}
                        <NavLink to="/" className={({isActive}) =>
                            'navbar-item is-uppercase' + ( isActive ? ' is-active' : '')}
                        >
                        Todos
                        </NavLink>
                    </div>
                    <div className="navbar-menu">
                        <div className="navbar-start">
                            <NavLink to="/add" className={({ isActive }) =>
                                'navbar-item' + (isActive ? ' is-active' : '')}
                            >
                            Создать дело
                            </NavLink>
                        </div>
                    </div>
                </nav>
                {/* со стилевыми классами content (обычное оформление содержимого страницы в стиле Bulma), px-6 (большие внутренние отступы сле-
                ва и справа) и mt-6 (большой внешний отступ сверху) — контейнер для вывода содержимого экранов. Изначально в нем присутствует заголовок «Todos»,
                позже мы заменим его на компонент перечня дел. */}

                <main className="content px-6 mt-6"> {/* ................... 14*/}
                    <Routes> {/* ....коммутатор - отдельные экраны приложения будут выводиться в теге main
                    В коммутатор поместили список маршрутов............... 14*/}
                        {/* ....создаем маршрут............... 14*/}
                        <Route path="/" element={
                            <TodoList list={this.state.data}
                                      setDone={this.setDone}
                                      delete={this.delete} />
                        } />
                        <Route path="/add" element={
                            <TodoAdd add={this.add} />
                        } />
                    </Routes>

                </main>
            </HashRouter>

        ); // ......................................................... 9
    }
}